{% extends 'base.html.twig' %}

{% block title %}{{ title }}{% endblock %}

{% block body %}
    {{ include('partials/nav.html.twig') }}
    <section class="matches">
        <aside class="filter">
            <div class="filter-header">Ieškok važiuojančių panašiu maršrutu</div>
            {{ form_start(filter_form, {'attr': {'class': 'filter-form'}}) }}
            <div class="mdc-select homedist">
                <i class="mdc-select__dropdown-icon"></i>
                {{ form_widget(filter_form.home_distance) }}
                <label class="mdc-floating-label">Atstumas tarp namų</label>
                <div class="mdc-line-ripple"></div>
            </div>
            <div class="mdc-select workdist">
                <i class="mdc-select__dropdown-icon"></i>
                {{ form_widget(filter_form.work_distance) }}
                <label class="mdc-floating-label">Atstumas tarp darbo vietų</label>
                <div class="mdc-line-ripple"></div>
            </div>
            {{ form_widget(filter_form.filter) }}
            {{ form_end(filter_form) }}
        </aside>
        <div class="matched-users">
            {% for match in matches %}
                <div class="user">
                    <div class="user-image">
                        <i class="fas fa-user-alt"></i>
                    </div>
                    <div class="user-info">
                        {{ match.name }}, {{ match.age }}
                    </div>
                    <div class="user-block">
                        <div class="user-block__placeholder">Atstumas tarp jūsų namų</div>
                        <div class="user-block__text"><i class="fa fa-home"></i>{{ match.home_distance_text }} {{ match.home_percent }}</div>
                    </div>
                    <div class="user-block">
                        <div class="user-block__placeholder">Atstumas tarp jūsų darbo vietų</div>
                        <div class="user-block__text"><i class="fas fa-map-marker"></i>{{ match.work_distance_text }} {{ match.work_percent }}</div>
                    </div>
                    <div class="user-block hidden" id="phone-block-{{ match.id }}">
                        <div class="user-block__placeholder">Telefonas</div>
                        <div class="user-block__text"><i class="fa fa-phone"></i>{{ match.phone }}</div>
                    </div>
                    <div class="user-block phone-btn">
                        <button onclick="showPhoneNumber()" class="mdc-button mdc-button--outlined" value="{{ match.id }}">Susisiekite</button>
                    </div>
                    <div class="user-description">
                        <div class="user-block__text"><i class="fas fa-clock"></i>Laikas: {{ match.description }}</div>
                    </div>
                    <div class="line-break"></div>
                    <div class="user-description">
                        <div class="user-block__text"><i class="fas fa-road"></i>Maršrutas: {{ match.route }}</div>
                    </div>
                </div>
            {% endfor %}
        </div>

    </section>
    <script>
        function showPhoneNumber(){
            let button = event.target;
            let id = button.getAttribute("value");
            console.log('click');
            let phone = document.getElementById("phone-block-" + id);
            phone.classList.remove("hidden");
            button.style.display = "none";
        }

        function initMap() {
            var map = new google.maps.Map(document.getElementById('map'), {
                mapTypeControl: false,
                center: {lat: 54.897343, lng: 23.882552},
                zoom: 13
            });

            new AutocompleteDirectionsHandler(map);
        }

        /**
         * @constructor
         */
        function AutocompleteDirectionsHandler(map) {
            this.map = map;
            this.originPlaceId = null;
            this.destinationPlaceId = null;
            this.travelMode = 'DRIVING';
            this.directionsService = new google.maps.DirectionsService;
            this.directionsDisplay = new google.maps.DirectionsRenderer;
            this.directionsDisplay.setMap(map);

            var originInput = document.getElementById('route_register_route_origin_input');
            var destinationInput = document.getElementById('route_register_route_destination_input');


            var originAutocomplete = new google.maps.places.Autocomplete(originInput);
            // Specify just the place data fields that you need.
            originAutocomplete.setFields(['place_id']);

            var destinationAutocomplete =
                new google.maps.places.Autocomplete(destinationInput);
            // Specify just the place data fields that you need.
            destinationAutocomplete.setFields(['place_id']);

            this.setupPlaceChangedListener(originAutocomplete, 'ORIG');
            this.setupPlaceChangedListener(destinationAutocomplete, 'DEST');

        }

        // Sets a listener on a radio button to change the filter type on Places
        // Autocomplete.
        AutocompleteDirectionsHandler.prototype.setupClickListener = function(
            id, mode) {
            var radioButton = document.getElementById(id);
            var me = this;

            radioButton.addEventListener('click', function() {
                me.travelMode = mode;
                me.route();
            });
        };

        AutocompleteDirectionsHandler.prototype.setupPlaceChangedListener = function(
            autocomplete, mode) {
            var me = this;
            autocomplete.bindTo('bounds', this.map);

            autocomplete.addListener('place_changed', function() {
                var place = autocomplete.getPlace();


                if (!place.place_id) {
                    window.alert('Please select an option from the dropdown list.');
                    return;
                }
                if (mode === 'ORIG') {
                    me.originPlaceId = place.place_id;
                    document.getElementById('route_register_route_home_location').value = place.place_id;


                } else {
                    me.destinationPlaceId = place.place_id;
                    document.getElementById('route_register_route_work_location').value = place.place_id;
                }
                me.route();
            });
        };

        AutocompleteDirectionsHandler.prototype.route = function() {
            if (!this.originPlaceId || !this.destinationPlaceId) {
                return;
            }
            var me = this;

            this.directionsService.route(
                {
                    origin: {'placeId': this.originPlaceId},
                    destination: {'placeId': this.destinationPlaceId},
                    travelMode: this.travelMode
                },
                function(response, status) {
                    if (status === 'OK') {
                        me.directionsDisplay.setDirections(response);
                    } else {
                        window.alert('Directions request failed due to ' + status);
                    }
                });
        };

    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAX-QC3A7Fn8_T76yNb-3JlyBfkl-NLc34&libraries=places&callback=initMap"
            async defer></script>


{% endblock %}